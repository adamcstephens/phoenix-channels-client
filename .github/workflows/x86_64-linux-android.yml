# based on https://github.com/xaynetwork/cargo_tai
name: x86_64-linux-android

on: push

env:
  ANDROID_API: 33
  ANDROID_NDK_VERSION: 25.2.9519653
  ANDROID_SYSTEM_IMAGE_PACKAGE: system-images;android-33;google_apis_playstore;x86_64
  TOOLCHAIN: nightly
  CARGO_TERM_COLOR: always

jobs:
  integration_tests:
    # rust cross-compilation
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v2
      - name: Install Rust Nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-linux-android
          default: true
      - name: Install cargo-ndk
        run: cargo install --git  https://github.com/bbqsrc/cargo-ndk
      - name: Install cargo-tai
        run: cargo install --git https://github.com/liveviewnative/cargo_tai --branch liveviewnative
      - name: Set up Elixir
        run: brew install elixir
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Build phoenix_channels_client
        uses: actions-rs/cargo@v1
        with:
          command: build
      - name: Install hex
        run: mix local.hex --force
      - name: Install rebar3
        run: mix local.rebar --force
      - name: Install test server dependencies
        working-directory: ./tests/support/test_server
        run: mix deps.get
      - name: Build test server
        working-directory: ./tests/support/test_server
        run: mix compile
      - name: Download Android Command Line Tools
        run: |
          cd $HOME
          mkdir -p android/cmdline-tools
          export ANDROID_HOME="$HOME/android"
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          cd android/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip commandlinetools-linux-9477386_latest.zip
          rm commandlinetools-linux-9477386_latest.zip
          mv cmdline-tools latest
          find $PWD -name sdkmanager
          echo "${ANDROID_HOME}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${ANDROID_HOME}/emulator" >> $GITHUB_PATH
          echo "${ANDROID_HOME}/platform-tools" >> $GITHUB_PATH
      - name: sdkmanager setup
        run: |
          sdkmanager --list
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" \
                               "platforms;android-${ANDROID_API}" \
                               "build-tools;${ANDROID_API}.0.2" \
                               "emulator" \
                               "ndk;${ANDROID_NDK_VERSION}" \
                               "${ANDROID_SYSTEM_IMAGE_PACKAGE}"
      # https://github.com/sfackler/rust-openssl/issues/1402
      - name: Add NDK clang to PATH
        run: |
          echo "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/darwin-x86_64/bin" >> $GITHUB_PATH
      - name: Compile OpenSSL for NDK
        run: |
          wget https://www.openssl.org/source/openssl-1.1.1s.tar.gz -O - | tar -xz
          export CC=clang
          cd openssl-1.1.1s
          ./Configure android64-x86_64
          make
          echo "X86_64_LINUX_ANDROID_OPENSSL_INCLUDE_DIR=$PWD/include" >> $GITHUB_ENV
          echo "X86_64_LINUX_ANDROID_OPENSSL_LIB_DIR=$PWD" >> $GITHUB_ENV
      - name: Create Android Virtual Device
        run: |
          echo no | \
            avdmanager create avd --force \
                                  --name AVD \
                                  --abi google_apis_playstore/x86_64 \
                                  --package "${ANDROID_SYSTEM_IMAGE_PACKAGE}"
      - name: Test phoenix_channel_clients
        run: |
          echo "Starting ADB server"
          ${ANDROID_HOME}/platform-tools/adb start-server
          echo "Starting Emulator"
          ${ANDROID_HOME}/emulator/emulator -avd AVD -netdelay none -netspeed full &
          ${ANDROID_HOME}/platform-tools/adb wait-for-device
          echo "Launching Test Server"
          cd tests/support/test_server && mix phx.server &
          while ! nc -z localhost 9002; do sleep 0.1; done
          echo "Test Server launched"
          export RUSTFLAGS="--cfg tokio_unstable"
          cargo-tai tests --target x86_64-linux-android \
                          --android-api-lvl ${ANDROID_API} \
                          --android-ndk ${ANDROID_NDK_HOME} \
                          --android-sdk ${ANDROID_HOME} \
                          --envs LD_LIBRARY_PATH=lib \
                          --libraries $PWD/openssl-1.1.1s/libcrypto.so.1.1 \
                          --libraries $PWD/openssl-1.1.1s/libssl.so.1.1
          kill %2
          kill %1
